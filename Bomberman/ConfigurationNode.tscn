[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var game_info={} # structure from the configuration file, we use it for writing / reading
var config_file

\"\"\" 
Method name: change_and_commit
Arguments: section - section in conf. file,
key - key in conf. file,
value - the value we want to assign
The function is responsible for changes in the game_info in the appropriate 
section -> key ​​and saving these changes in the configuration file
\"\"\"
func change_and_commit(section,key,value):
	game_info[section][key] = value
	config_file.set_value(section,key,game_info[section][key])
	config_file.save(\"res://config.cfg\")

\"\"\" 
Method name: get_value
Arguments: section - section in conf. file,
key - key in conf. file
The function returns the value in the section -> key of game_info structure
\"\"\"
func get_value(section,key):
	return game_info[section][key]


\"\"\" 
Method name: update_move_set
Arguments: PlayerID
The function responsible for adding InputEvents to actions.
\"\"\"
func update_move_set(PlayerID):
	var UPevent = InputEventKey.new()
	UPevent.set_scancode( game_info[PlayerID][\"up\"] )
	InputMap.action_erase_events(PlayerID+'_ui_up')
	InputMap.action_add_event( PlayerID+'_ui_up',UPevent)
	
	var DOWNevent = InputEventKey.new()
	DOWNevent.set_scancode( game_info[PlayerID][\"down\"] )
	InputMap.action_erase_events(PlayerID+'_ui_down')
	InputMap.action_add_event( PlayerID+'_ui_down',DOWNevent)
	
	var LEFTevent = InputEventKey.new()
	LEFTevent.set_scancode( game_info[PlayerID][\"left\"] )
	InputMap.action_erase_events(PlayerID+'_ui_left')
	InputMap.action_add_event( PlayerID+'_ui_left',LEFTevent)
	
	var RIGHTevent = InputEventKey.new()
	RIGHTevent.set_scancode( game_info[PlayerID][\"right\"] )
	InputMap.action_erase_events(PlayerID+'_ui_right')
	InputMap.action_add_event( PlayerID+'_ui_right',RIGHTevent)
	
	var BOMBevent = InputEventKey.new()
	BOMBevent.set_scancode( game_info[PlayerID][\"bomb\"] )
	InputMap.action_erase_events(PlayerID+'_ui_select')
	InputMap.action_add_event( PlayerID+'_ui_select',BOMBevent)

\"\"\" 
Method name: load_configuration
Arguments: none
The function is responsible for loading all of the fields from the 
configuration file into the structure.
\"\"\"
func load_configuration(): 
	config_file.load(\"res://config.cfg\")
	for section in game_info.keys():
		for key in game_info[section]:
			game_info[section][key] = config_file.get_value(section,key,null)

\"\"\" 
Method name: add_actions
Arguments: none
The function responsible for adding actions to the input map.
It is needed to handle movement.
\"\"\"
func add_actions():
	InputMap.add_action(\"P1_ui_up\")
	InputMap.add_action(\"P2_ui_up\")
	InputMap.add_action(\"P3_ui_up\")
	InputMap.add_action(\"P4_ui_up\")
	InputMap.add_action(\"P1_ui_down\")
	InputMap.add_action(\"P2_ui_down\")
	InputMap.add_action(\"P3_ui_down\")
	InputMap.add_action(\"P4_ui_down\")
	InputMap.add_action(\"P1_ui_left\")
	InputMap.add_action(\"P2_ui_left\")
	InputMap.add_action(\"P3_ui_left\")
	InputMap.add_action(\"P4_ui_left\")
	InputMap.add_action(\"P1_ui_right\")
	InputMap.add_action(\"P2_ui_right\")
	InputMap.add_action(\"P3_ui_right\")
	InputMap.add_action(\"P4_ui_right\")
	InputMap.add_action(\"P1_ui_select\")
	InputMap.add_action(\"P2_ui_select\")
	InputMap.add_action(\"P3_ui_select\")
	InputMap.add_action(\"P4_ui_select\")

\"\"\" 
Method name: _ready
Arguments: none
Function responsible for the initial addition of the action, 
loading the configuration file, defining the game_info structure
and updating movement set for each player
\"\"\"
func _ready():
	add_actions()
	config_file = ConfigFile.new()
	game_info = {
		\"map\": {
			\"map_type\": null
		},
		\"P1\": {
			\"name\": null,
			\"right\": null,
			\"left\": null,
			\"up\": null,
			\"down\": null,
			\"bomb\": null,
			\"color\": null,
			\"is_bot\": null,
			\"is_playing\": null
		},
		\"P2\": {
			\"name\": null,
			\"right\": null,
			\"left\": null,
			\"up\": null,
			\"down\": null,
			\"bomb\": null,
			\"color\": null,
			\"is_bot\": null,
			\"is_playing\": null
		},
		\"P3\": {
			\"name\": null,
			\"right\": null,
			\"left\": null,
			\"up\": null,
			\"down\": null,
			\"bomb\": null,
			\"color\": null,
			\"is_bot\": null,
			\"is_playing\": null
		},
		\"P4\": {
			\"name\": null,
			\"right\": null,
			\"left\": null,
			\"up\": null,
			\"down\": null,
			\"bomb\": null,
			\"color\": null,
			\"is_bot\": null,
			\"is_playing\": null
		},
		\"Sounds\": {
			\"sound\" : 0,
			\"soundSwitch\": false,
			\"sfx\" : 0,
			\"sfxSwitch\": false
		},
	}
	load_configuration()
	update_move_set(\"P1\")
	update_move_set(\"P2\")
	update_move_set(\"P3\")
	update_move_set(\"P4\")"

[node name="Node2D" type="Node2D"]
script = SubResource( 1 )

